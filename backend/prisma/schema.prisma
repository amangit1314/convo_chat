generator client {
    provider        = "prisma-client-js"
    schema          = "public, auth"
    previewFeatures = ["fullTextSearch", "multiSchema"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = "public, auth"
}

model user {
    uid                String       @id @default(cuid())
    token              String?
    firebaseToken      String?
    username           String?
    email              String       @unique
    number             String       @unique
    password           String
    profileImage       String?
    createdOrUpdatedAt DateTime     @default(now())
    isOnline           Boolean?     @default(false)
    joinedGroups       group[]      @relation("UserJoinedGroups")
    DirectChat         directChat[] @relation("UserChats")

    @@map("public.user")
    @@schema("public, auth")
}

model directChat {
    roomId        String    @id @unique @default(cuid())
    messages      message[] @relation("DirectChatMessage")
    senderId      String
    receiverId    String
    lastMessageAt DateTime  @default(now()) @updatedAt
    participants  user[]    @relation("UserChats")

    @@map("public.directChat")
    @@schema("public, auth")
}

model group {
    groupId   String    @id @unique @default(cuid())
    userUid   String?
    members   user[]    @relation("UserJoinedGroups")
    groupName String
    createdAt DateTime  @default(now())
    message   String
    messages  message[] @relation("GroupMessage")

    @@map("public.group")
    @@schema("public, auth")
}

model message {
    messageId        String      @id @default(cuid())
    chatRoomId       String      @unique
    sender           String
    receiver         String
    type             String
    content          String
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
    isDeleted        Boolean     @default(false)
    directChat       directChat? @relation("DirectChatMessage", fields: [directChatRoomId], references: [roomId])
    reactions        reaction[]  @relation("MessageReactions")
    group            group?      @relation("GroupMessage", fields: [groupId], references: [groupId])
    directChatRoomId String?
    groupId          String?

    @@map("public.message")
    @@schema("public, auth")
}

model reaction {
    id               String   @id @default(cuid())
    userId           String
    reaction         String
    reactedAt        DateTime @updatedAt
    message          message? @relation("MessageReactions", fields: [messageMessageId], references: [messageId])
    messageMessageId String?

    @@map("public.reaction")
    @@schema("public, auth")
}
